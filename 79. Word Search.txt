


class Solution {
    public boolean exist(char[][] board, String word) {
        int n = board.length;
        int m = board[0].length;
        
        boolean visited[][] = new boolean[n][m];
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j]==word.charAt(0)){
                    if(backtrack(board,word,visited,0,i,j)){
                        return true;
                    }
                }
            }
        }
        return false;
        
    }
    
    public boolean backtrack(char[][] board, String word, boolean [][] visited,int currIndex,int i,int j){
        if(currIndex==word.length()){
            return true;
        }
        if(i<0 || i>=board.length || j<0 || j>=board[0].length || visited[i][j] || board[i][j]!=word.charAt(currIndex)){
            return false;
        }
        visited[i][j] = true;
        
        if(backtrack(board,word,visited,currIndex+1,i+1,j)
          || backtrack(board,word,visited,currIndex+1,i-1,j)
          || backtrack(board,word,visited,currIndex+1,i,j+1)
          || backtrack(board,word,visited,currIndex+1,i,j-1)){
            return true;
        }
        
        visited[i][j] = false;
        return false;
    }
}